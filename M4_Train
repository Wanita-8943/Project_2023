{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU",
    "gpuClass": "standard"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Wanita-8943/Project_2023/blob/main/M4_Train\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "KKSs7cyoPHcD"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import shutil"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7LoeZxmVPMxp",
        "outputId": "8c4b9163-26fb-4466-b85f-b316e76cdcb4"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from tensorflow.keras import models\n",
        "from tensorflow.keras import layers\n",
        "from tensorflow.keras import optimizers\n",
        "import os\n",
        "import glob\n",
        "import shutil\n",
        "import sys\n",
        "import numpy as np\n",
        "from skimage.io import imread\n",
        "import matplotlib.pyplot as plt\n",
        "from IPython.display import Image\n",
        "%matplotlib inline"
      ],
      "metadata": {
        "id": "1pX9g1HxPM2f"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "batch_size = 16\n",
        "width = 150\n",
        "height = 150\n",
        "epochs = 250\n",
        "NUM_TRAIN = 1425\n",
        "NUM_TEST = 475\n",
        "dropout_rate = 0.2\n",
        "input_shape = (height, width, 3)"
      ],
      "metadata": {
        "id": "eSFtvGyvPM6O"
      },
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#ดึงข้อมูลใน Github มาใช้\n",
        "import os\n",
        "%cd /content\n",
        "if not os.path.isdir(\"efficientnet_keras_transfer_learning\"):\n",
        " !git clone https://github.com/Wanita-8943/efficientnet_keras_transfer_learning\n",
        "%cd efficientnet_keras_transfer_learning/"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lb4K4CsMPNAW",
        "outputId": "6a0be314-5ee5-4bd4-a0aa-17d27b038c23"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "/content\n",
            "Cloning into 'efficientnet_keras_transfer_learning'...\n",
            "remote: Enumerating objects: 837, done.\u001b[K\n",
            "remote: Counting objects: 100% (359/359), done.\u001b[K\n",
            "remote: Compressing objects: 100% (124/124), done.\u001b[K\n",
            "remote: Total 837 (delta 255), reused 328 (delta 235), pack-reused 478\u001b[K\n",
            "Receiving objects: 100% (837/837), 13.82 MiB | 34.26 MiB/s, done.\n",
            "Resolving deltas: 100% (495/495), done.\n",
            "/content/efficientnet_keras_transfer_learning\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Options: EfficientNetB0, EfficientNetB1, EfficientNetB2, EfficientNetB3\n",
        "# Higher the number, the more complex the model is.\n",
        "from efficientnet import EfficientNetB0 as Net\n",
        "from efficientnet import center_crop_and_resize, preprocess_input"
      ],
      "metadata": {
        "id": "eyBg0dLKPND3"
      },
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# loading pretrained conv base model\n",
        "# โหลดโมเดล มาโดยตัด output ของโมเดลออก เเต่ยังใช้ input อันเดิม\n",
        "# เเละโหลด weight ของโมเดล มาด้วยที่ชื่อว่า imagenet\n",
        "conv_base = Net(weights='imagenet', include_top=False, input_shape=input_shape)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DoxI-q8-1giK",
        "outputId": "0d9b4439-f442-405f-f778-60cacf95ad95"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:tensorflow:From /usr/local/lib/python3.8/dist-packages/tensorflow/python/autograph/pyct/static_analysis/liveness.py:83: Analyzer.lamba_check (from tensorflow.python.autograph.pyct.static_analysis.liveness) is deprecated and will be removed after 2023-09-23.\n",
            "Instructions for updating:\n",
            "Lambda fuctions will be no more assumed to be used in the statement where they are used, or at least in the same block. https://github.com/tensorflow/tensorflow/issues/56089\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Downloading data from https://github.com/qubvel/efficientnet/releases/download/v0.0.1/efficientnet-b0_imagenet_1000_notop.h5\n",
            "16717576/16717576 [==============================] - 0s 0us/step\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "conv_base.summary() #ดู Summary"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "od4Lp6dD1lWK",
        "outputId": "52104493-800e-4790-a659-e59960bbc9ae"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"efficientnet-b0\"\n",
            "__________________________________________________________________________________________________\n",
            " Layer (type)                   Output Shape         Param #     Connected to                     \n",
            "==================================================================================================\n",
            " input_1 (InputLayer)           [(None, 150, 150, 3  0           []                               \n",
            "                                )]                                                                \n",
            "                                                                                                  \n",
            " conv2d (Conv2D)                (None, 75, 75, 32)   864         ['input_1[0][0]']                \n",
            "                                                                                                  \n",
            " batch_normalization (BatchNorm  (None, 75, 75, 32)  128         ['conv2d[0][0]']                 \n",
            " alization)                                                                                       \n",
            "                                                                                                  \n",
            " swish (Swish)                  (None, 75, 75, 32)   0           ['batch_normalization[0][0]']    \n",
            "                                                                                                  \n",
            " depthwise_conv2d (DepthwiseCon  (None, 75, 75, 32)  288         ['swish[0][0]']                  \n",
            " v2D)                                                                                             \n",
            "                                                                                                  \n",
            " batch_normalization_1 (BatchNo  (None, 75, 75, 32)  128         ['depthwise_conv2d[0][0]']       \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " swish_1 (Swish)                (None, 75, 75, 32)   0           ['batch_normalization_1[0][0]']  \n",
            "                                                                                                  \n",
            " lambda (Lambda)                (None, 1, 1, 32)     0           ['swish_1[0][0]']                \n",
            "                                                                                                  \n",
            " conv2d_1 (Conv2D)              (None, 1, 1, 8)      264         ['lambda[0][0]']                 \n",
            "                                                                                                  \n",
            " swish_2 (Swish)                (None, 1, 1, 8)      0           ['conv2d_1[0][0]']               \n",
            "                                                                                                  \n",
            " conv2d_2 (Conv2D)              (None, 1, 1, 32)     288         ['swish_2[0][0]']                \n",
            "                                                                                                  \n",
            " activation (Activation)        (None, 1, 1, 32)     0           ['conv2d_2[0][0]']               \n",
            "                                                                                                  \n",
            " multiply (Multiply)            (None, 75, 75, 32)   0           ['activation[0][0]',             \n",
            "                                                                  'swish_1[0][0]']                \n",
            "                                                                                                  \n",
            " conv2d_3 (Conv2D)              (None, 75, 75, 16)   512         ['multiply[0][0]']               \n",
            "                                                                                                  \n",
            " batch_normalization_2 (BatchNo  (None, 75, 75, 16)  64          ['conv2d_3[0][0]']               \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv2d_4 (Conv2D)              (None, 75, 75, 96)   1536        ['batch_normalization_2[0][0]']  \n",
            "                                                                                                  \n",
            " batch_normalization_3 (BatchNo  (None, 75, 75, 96)  384         ['conv2d_4[0][0]']               \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " swish_3 (Swish)                (None, 75, 75, 96)   0           ['batch_normalization_3[0][0]']  \n",
            "                                                                                                  \n",
            " depthwise_conv2d_1 (DepthwiseC  (None, 38, 38, 96)  864         ['swish_3[0][0]']                \n",
            " onv2D)                                                                                           \n",
            "                                                                                                  \n",
            " batch_normalization_4 (BatchNo  (None, 38, 38, 96)  384         ['depthwise_conv2d_1[0][0]']     \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " swish_4 (Swish)                (None, 38, 38, 96)   0           ['batch_normalization_4[0][0]']  \n",
            "                                                                                                  \n",
            " lambda_1 (Lambda)              (None, 1, 1, 96)     0           ['swish_4[0][0]']                \n",
            "                                                                                                  \n",
            " conv2d_5 (Conv2D)              (None, 1, 1, 4)      388         ['lambda_1[0][0]']               \n",
            "                                                                                                  \n",
            " swish_5 (Swish)                (None, 1, 1, 4)      0           ['conv2d_5[0][0]']               \n",
            "                                                                                                  \n",
            " conv2d_6 (Conv2D)              (None, 1, 1, 96)     480         ['swish_5[0][0]']                \n",
            "                                                                                                  \n",
            " activation_1 (Activation)      (None, 1, 1, 96)     0           ['conv2d_6[0][0]']               \n",
            "                                                                                                  \n",
            " multiply_1 (Multiply)          (None, 38, 38, 96)   0           ['activation_1[0][0]',           \n",
            "                                                                  'swish_4[0][0]']                \n",
            "                                                                                                  \n",
            " conv2d_7 (Conv2D)              (None, 38, 38, 24)   2304        ['multiply_1[0][0]']             \n",
            "                                                                                                  \n",
            " batch_normalization_5 (BatchNo  (None, 38, 38, 24)  96          ['conv2d_7[0][0]']               \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " conv2d_8 (Conv2D)              (None, 38, 38, 144)  3456        ['batch_normalization_5[0][0]']  \n",
            "                                                                                                  \n",
            " batch_normalization_6 (BatchNo  (None, 38, 38, 144)  576        ['conv2d_8[0][0]']               \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " swish_6 (Swish)                (None, 38, 38, 144)  0           ['batch_normalization_6[0][0]']  \n",
            "                                                                                                  \n",
            " depthwise_conv2d_2 (DepthwiseC  (None, 38, 38, 144)  1296       ['swish_6[0][0]']                \n",
            " onv2D)                                                                                           \n",
            "                                                                                                  \n",
            " batch_normalization_7 (BatchNo  (None, 38, 38, 144)  576        ['depthwise_conv2d_2[0][0]']     \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " swish_7 (Swish)                (None, 38, 38, 144)  0           ['batch_normalization_7[0][0]']  \n",
            "                                                                                                  \n",
            " lambda_2 (Lambda)              (None, 1, 1, 144)    0           ['swish_7[0][0]']                \n",
            "                                                                                                  \n",
            " conv2d_9 (Conv2D)              (None, 1, 1, 6)      870         ['lambda_2[0][0]']               \n",
            "                                                                                                  \n",
            " swish_8 (Swish)                (None, 1, 1, 6)      0           ['conv2d_9[0][0]']               \n",
            "                                                                                                  \n",
            " conv2d_10 (Conv2D)             (None, 1, 1, 144)    1008        ['swish_8[0][0]']                \n",
            "                                                                                                  \n",
            " activation_2 (Activation)      (None, 1, 1, 144)    0           ['conv2d_10[0][0]']              \n",
            "                                                                                                  \n",
            " multiply_2 (Multiply)          (None, 38, 38, 144)  0           ['activation_2[0][0]',           \n",
            "                                                                  'swish_7[0][0]']                \n",
            "                                                                                                  \n",
            " conv2d_11 (Conv2D)             (None, 38, 38, 24)   3456        ['multiply_2[0][0]']             \n",
            "                                                                                                  \n",
            " batch_normalization_8 (BatchNo  (None, 38, 38, 24)  96          ['conv2d_11[0][0]']              \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " drop_connect (DropConnect)     (None, 38, 38, 24)   0           ['batch_normalization_8[0][0]']  \n",
            "                                                                                                  \n",
            " add (Add)                      (None, 38, 38, 24)   0           ['drop_connect[0][0]',           \n",
            "                                                                  'batch_normalization_5[0][0]']  \n",
            "                                                                                                  \n",
            " conv2d_12 (Conv2D)             (None, 38, 38, 144)  3456        ['add[0][0]']                    \n",
            "                                                                                                  \n",
            " batch_normalization_9 (BatchNo  (None, 38, 38, 144)  576        ['conv2d_12[0][0]']              \n",
            " rmalization)                                                                                     \n",
            "                                                                                                  \n",
            " swish_9 (Swish)                (None, 38, 38, 144)  0           ['batch_normalization_9[0][0]']  \n",
            "                                                                                                  \n",
            " depthwise_conv2d_3 (DepthwiseC  (None, 19, 19, 144)  3600       ['swish_9[0][0]']                \n",
            " onv2D)                                                                                           \n",
            "                                                                                                  \n",
            " batch_normalization_10 (BatchN  (None, 19, 19, 144)  576        ['depthwise_conv2d_3[0][0]']     \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " swish_10 (Swish)               (None, 19, 19, 144)  0           ['batch_normalization_10[0][0]'] \n",
            "                                                                                                  \n",
            " lambda_3 (Lambda)              (None, 1, 1, 144)    0           ['swish_10[0][0]']               \n",
            "                                                                                                  \n",
            " conv2d_13 (Conv2D)             (None, 1, 1, 6)      870         ['lambda_3[0][0]']               \n",
            "                                                                                                  \n",
            " swish_11 (Swish)               (None, 1, 1, 6)      0           ['conv2d_13[0][0]']              \n",
            "                                                                                                  \n",
            " conv2d_14 (Conv2D)             (None, 1, 1, 144)    1008        ['swish_11[0][0]']               \n",
            "                                                                                                  \n",
            " activation_3 (Activation)      (None, 1, 1, 144)    0           ['conv2d_14[0][0]']              \n",
            "                                                                                                  \n",
            " multiply_3 (Multiply)          (None, 19, 19, 144)  0           ['activation_3[0][0]',           \n",
            "                                                                  'swish_10[0][0]']               \n",
            "                                                                                                  \n",
            " conv2d_15 (Conv2D)             (None, 19, 19, 40)   5760        ['multiply_3[0][0]']             \n",
            "                                                                                                  \n",
            " batch_normalization_11 (BatchN  (None, 19, 19, 40)  160         ['conv2d_15[0][0]']              \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " conv2d_16 (Conv2D)             (None, 19, 19, 240)  9600        ['batch_normalization_11[0][0]'] \n",
            "                                                                                                  \n",
            " batch_normalization_12 (BatchN  (None, 19, 19, 240)  960        ['conv2d_16[0][0]']              \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " swish_12 (Swish)               (None, 19, 19, 240)  0           ['batch_normalization_12[0][0]'] \n",
            "                                                                                                  \n",
            " depthwise_conv2d_4 (DepthwiseC  (None, 19, 19, 240)  6000       ['swish_12[0][0]']               \n",
            " onv2D)                                                                                           \n",
            "                                                                                                  \n",
            " batch_normalization_13 (BatchN  (None, 19, 19, 240)  960        ['depthwise_conv2d_4[0][0]']     \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " swish_13 (Swish)               (None, 19, 19, 240)  0           ['batch_normalization_13[0][0]'] \n",
            "                                                                                                  \n",
            " lambda_4 (Lambda)              (None, 1, 1, 240)    0           ['swish_13[0][0]']               \n",
            "                                                                                                  \n",
            " conv2d_17 (Conv2D)             (None, 1, 1, 10)     2410        ['lambda_4[0][0]']               \n",
            "                                                                                                  \n",
            " swish_14 (Swish)               (None, 1, 1, 10)     0           ['conv2d_17[0][0]']              \n",
            "                                                                                                  \n",
            " conv2d_18 (Conv2D)             (None, 1, 1, 240)    2640        ['swish_14[0][0]']               \n",
            "                                                                                                  \n",
            " activation_4 (Activation)      (None, 1, 1, 240)    0           ['conv2d_18[0][0]']              \n",
            "                                                                                                  \n",
            " multiply_4 (Multiply)          (None, 19, 19, 240)  0           ['activation_4[0][0]',           \n",
            "                                                                  'swish_13[0][0]']               \n",
            "                                                                                                  \n",
            " conv2d_19 (Conv2D)             (None, 19, 19, 40)   9600        ['multiply_4[0][0]']             \n",
            "                                                                                                  \n",
            " batch_normalization_14 (BatchN  (None, 19, 19, 40)  160         ['conv2d_19[0][0]']              \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " drop_connect_1 (DropConnect)   (None, 19, 19, 40)   0           ['batch_normalization_14[0][0]'] \n",
            "                                                                                                  \n",
            " add_1 (Add)                    (None, 19, 19, 40)   0           ['drop_connect_1[0][0]',         \n",
            "                                                                  'batch_normalization_11[0][0]'] \n",
            "                                                                                                  \n",
            " conv2d_20 (Conv2D)             (None, 19, 19, 240)  9600        ['add_1[0][0]']                  \n",
            "                                                                                                  \n",
            " batch_normalization_15 (BatchN  (None, 19, 19, 240)  960        ['conv2d_20[0][0]']              \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " swish_15 (Swish)               (None, 19, 19, 240)  0           ['batch_normalization_15[0][0]'] \n",
            "                                                                                                  \n",
            " depthwise_conv2d_5 (DepthwiseC  (None, 10, 10, 240)  2160       ['swish_15[0][0]']               \n",
            " onv2D)                                                                                           \n",
            "                                                                                                  \n",
            " batch_normalization_16 (BatchN  (None, 10, 10, 240)  960        ['depthwise_conv2d_5[0][0]']     \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " swish_16 (Swish)               (None, 10, 10, 240)  0           ['batch_normalization_16[0][0]'] \n",
            "                                                                                                  \n",
            " lambda_5 (Lambda)              (None, 1, 1, 240)    0           ['swish_16[0][0]']               \n",
            "                                                                                                  \n",
            " conv2d_21 (Conv2D)             (None, 1, 1, 10)     2410        ['lambda_5[0][0]']               \n",
            "                                                                                                  \n",
            " swish_17 (Swish)               (None, 1, 1, 10)     0           ['conv2d_21[0][0]']              \n",
            "                                                                                                  \n",
            " conv2d_22 (Conv2D)             (None, 1, 1, 240)    2640        ['swish_17[0][0]']               \n",
            "                                                                                                  \n",
            " activation_5 (Activation)      (None, 1, 1, 240)    0           ['conv2d_22[0][0]']              \n",
            "                                                                                                  \n",
            " multiply_5 (Multiply)          (None, 10, 10, 240)  0           ['activation_5[0][0]',           \n",
            "                                                                  'swish_16[0][0]']               \n",
            "                                                                                                  \n",
            " conv2d_23 (Conv2D)             (None, 10, 10, 80)   19200       ['multiply_5[0][0]']             \n",
            "                                                                                                  \n",
            " batch_normalization_17 (BatchN  (None, 10, 10, 80)  320         ['conv2d_23[0][0]']              \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " conv2d_24 (Conv2D)             (None, 10, 10, 480)  38400       ['batch_normalization_17[0][0]'] \n",
            "                                                                                                  \n",
            " batch_normalization_18 (BatchN  (None, 10, 10, 480)  1920       ['conv2d_24[0][0]']              \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " swish_18 (Swish)               (None, 10, 10, 480)  0           ['batch_normalization_18[0][0]'] \n",
            "                                                                                                  \n",
            " depthwise_conv2d_6 (DepthwiseC  (None, 10, 10, 480)  4320       ['swish_18[0][0]']               \n",
            " onv2D)                                                                                           \n",
            "                                                                                                  \n",
            " batch_normalization_19 (BatchN  (None, 10, 10, 480)  1920       ['depthwise_conv2d_6[0][0]']     \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " swish_19 (Swish)               (None, 10, 10, 480)  0           ['batch_normalization_19[0][0]'] \n",
            "                                                                                                  \n",
            " lambda_6 (Lambda)              (None, 1, 1, 480)    0           ['swish_19[0][0]']               \n",
            "                                                                                                  \n",
            " conv2d_25 (Conv2D)             (None, 1, 1, 20)     9620        ['lambda_6[0][0]']               \n",
            "                                                                                                  \n",
            " swish_20 (Swish)               (None, 1, 1, 20)     0           ['conv2d_25[0][0]']              \n",
            "                                                                                                  \n",
            " conv2d_26 (Conv2D)             (None, 1, 1, 480)    10080       ['swish_20[0][0]']               \n",
            "                                                                                                  \n",
            " activation_6 (Activation)      (None, 1, 1, 480)    0           ['conv2d_26[0][0]']              \n",
            "                                                                                                  \n",
            " multiply_6 (Multiply)          (None, 10, 10, 480)  0           ['activation_6[0][0]',           \n",
            "                                                                  'swish_19[0][0]']               \n",
            "                                                                                                  \n",
            " conv2d_27 (Conv2D)             (None, 10, 10, 80)   38400       ['multiply_6[0][0]']             \n",
            "                                                                                                  \n",
            " batch_normalization_20 (BatchN  (None, 10, 10, 80)  320         ['conv2d_27[0][0]']              \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " drop_connect_2 (DropConnect)   (None, 10, 10, 80)   0           ['batch_normalization_20[0][0]'] \n",
            "                                                                                                  \n",
            " add_2 (Add)                    (None, 10, 10, 80)   0           ['drop_connect_2[0][0]',         \n",
            "                                                                  'batch_normalization_17[0][0]'] \n",
            "                                                                                                  \n",
            " conv2d_28 (Conv2D)             (None, 10, 10, 480)  38400       ['add_2[0][0]']                  \n",
            "                                                                                                  \n",
            " batch_normalization_21 (BatchN  (None, 10, 10, 480)  1920       ['conv2d_28[0][0]']              \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " swish_21 (Swish)               (None, 10, 10, 480)  0           ['batch_normalization_21[0][0]'] \n",
            "                                                                                                  \n",
            " depthwise_conv2d_7 (DepthwiseC  (None, 10, 10, 480)  4320       ['swish_21[0][0]']               \n",
            " onv2D)                                                                                           \n",
            "                                                                                                  \n",
            " batch_normalization_22 (BatchN  (None, 10, 10, 480)  1920       ['depthwise_conv2d_7[0][0]']     \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " swish_22 (Swish)               (None, 10, 10, 480)  0           ['batch_normalization_22[0][0]'] \n",
            "                                                                                                  \n",
            " lambda_7 (Lambda)              (None, 1, 1, 480)    0           ['swish_22[0][0]']               \n",
            "                                                                                                  \n",
            " conv2d_29 (Conv2D)             (None, 1, 1, 20)     9620        ['lambda_7[0][0]']               \n",
            "                                                                                                  \n",
            " swish_23 (Swish)               (None, 1, 1, 20)     0           ['conv2d_29[0][0]']              \n",
            "                                                                                                  \n",
            " conv2d_30 (Conv2D)             (None, 1, 1, 480)    10080       ['swish_23[0][0]']               \n",
            "                                                                                                  \n",
            " activation_7 (Activation)      (None, 1, 1, 480)    0           ['conv2d_30[0][0]']              \n",
            "                                                                                                  \n",
            " multiply_7 (Multiply)          (None, 10, 10, 480)  0           ['activation_7[0][0]',           \n",
            "                                                                  'swish_22[0][0]']               \n",
            "                                                                                                  \n",
            " conv2d_31 (Conv2D)             (None, 10, 10, 80)   38400       ['multiply_7[0][0]']             \n",
            "                                                                                                  \n",
            " batch_normalization_23 (BatchN  (None, 10, 10, 80)  320         ['conv2d_31[0][0]']              \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " drop_connect_3 (DropConnect)   (None, 10, 10, 80)   0           ['batch_normalization_23[0][0]'] \n",
            "                                                                                                  \n",
            " add_3 (Add)                    (None, 10, 10, 80)   0           ['drop_connect_3[0][0]',         \n",
            "                                                                  'add_2[0][0]']                  \n",
            "                                                                                                  \n",
            " conv2d_32 (Conv2D)             (None, 10, 10, 480)  38400       ['add_3[0][0]']                  \n",
            "                                                                                                  \n",
            " batch_normalization_24 (BatchN  (None, 10, 10, 480)  1920       ['conv2d_32[0][0]']              \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " swish_24 (Swish)               (None, 10, 10, 480)  0           ['batch_normalization_24[0][0]'] \n",
            "                                                                                                  \n",
            " depthwise_conv2d_8 (DepthwiseC  (None, 10, 10, 480)  12000      ['swish_24[0][0]']               \n",
            " onv2D)                                                                                           \n",
            "                                                                                                  \n",
            " batch_normalization_25 (BatchN  (None, 10, 10, 480)  1920       ['depthwise_conv2d_8[0][0]']     \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " swish_25 (Swish)               (None, 10, 10, 480)  0           ['batch_normalization_25[0][0]'] \n",
            "                                                                                                  \n",
            " lambda_8 (Lambda)              (None, 1, 1, 480)    0           ['swish_25[0][0]']               \n",
            "                                                                                                  \n",
            " conv2d_33 (Conv2D)             (None, 1, 1, 20)     9620        ['lambda_8[0][0]']               \n",
            "                                                                                                  \n",
            " swish_26 (Swish)               (None, 1, 1, 20)     0           ['conv2d_33[0][0]']              \n",
            "                                                                                                  \n",
            " conv2d_34 (Conv2D)             (None, 1, 1, 480)    10080       ['swish_26[0][0]']               \n",
            "                                                                                                  \n",
            " activation_8 (Activation)      (None, 1, 1, 480)    0           ['conv2d_34[0][0]']              \n",
            "                                                                                                  \n",
            " multiply_8 (Multiply)          (None, 10, 10, 480)  0           ['activation_8[0][0]',           \n",
            "                                                                  'swish_25[0][0]']               \n",
            "                                                                                                  \n",
            " conv2d_35 (Conv2D)             (None, 10, 10, 112)  53760       ['multiply_8[0][0]']             \n",
            "                                                                                                  \n",
            " batch_normalization_26 (BatchN  (None, 10, 10, 112)  448        ['conv2d_35[0][0]']              \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " conv2d_36 (Conv2D)             (None, 10, 10, 672)  75264       ['batch_normalization_26[0][0]'] \n",
            "                                                                                                  \n",
            " batch_normalization_27 (BatchN  (None, 10, 10, 672)  2688       ['conv2d_36[0][0]']              \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " swish_27 (Swish)               (None, 10, 10, 672)  0           ['batch_normalization_27[0][0]'] \n",
            "                                                                                                  \n",
            " depthwise_conv2d_9 (DepthwiseC  (None, 10, 10, 672)  16800      ['swish_27[0][0]']               \n",
            " onv2D)                                                                                           \n",
            "                                                                                                  \n",
            " batch_normalization_28 (BatchN  (None, 10, 10, 672)  2688       ['depthwise_conv2d_9[0][0]']     \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " swish_28 (Swish)               (None, 10, 10, 672)  0           ['batch_normalization_28[0][0]'] \n",
            "                                                                                                  \n",
            " lambda_9 (Lambda)              (None, 1, 1, 672)    0           ['swish_28[0][0]']               \n",
            "                                                                                                  \n",
            " conv2d_37 (Conv2D)             (None, 1, 1, 28)     18844       ['lambda_9[0][0]']               \n",
            "                                                                                                  \n",
            " swish_29 (Swish)               (None, 1, 1, 28)     0           ['conv2d_37[0][0]']              \n",
            "                                                                                                  \n",
            " conv2d_38 (Conv2D)             (None, 1, 1, 672)    19488       ['swish_29[0][0]']               \n",
            "                                                                                                  \n",
            " activation_9 (Activation)      (None, 1, 1, 672)    0           ['conv2d_38[0][0]']              \n",
            "                                                                                                  \n",
            " multiply_9 (Multiply)          (None, 10, 10, 672)  0           ['activation_9[0][0]',           \n",
            "                                                                  'swish_28[0][0]']               \n",
            "                                                                                                  \n",
            " conv2d_39 (Conv2D)             (None, 10, 10, 112)  75264       ['multiply_9[0][0]']             \n",
            "                                                                                                  \n",
            " batch_normalization_29 (BatchN  (None, 10, 10, 112)  448        ['conv2d_39[0][0]']              \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " drop_connect_4 (DropConnect)   (None, 10, 10, 112)  0           ['batch_normalization_29[0][0]'] \n",
            "                                                                                                  \n",
            " add_4 (Add)                    (None, 10, 10, 112)  0           ['drop_connect_4[0][0]',         \n",
            "                                                                  'batch_normalization_26[0][0]'] \n",
            "                                                                                                  \n",
            " conv2d_40 (Conv2D)             (None, 10, 10, 672)  75264       ['add_4[0][0]']                  \n",
            "                                                                                                  \n",
            " batch_normalization_30 (BatchN  (None, 10, 10, 672)  2688       ['conv2d_40[0][0]']              \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " swish_30 (Swish)               (None, 10, 10, 672)  0           ['batch_normalization_30[0][0]'] \n",
            "                                                                                                  \n",
            " depthwise_conv2d_10 (Depthwise  (None, 10, 10, 672)  16800      ['swish_30[0][0]']               \n",
            " Conv2D)                                                                                          \n",
            "                                                                                                  \n",
            " batch_normalization_31 (BatchN  (None, 10, 10, 672)  2688       ['depthwise_conv2d_10[0][0]']    \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " swish_31 (Swish)               (None, 10, 10, 672)  0           ['batch_normalization_31[0][0]'] \n",
            "                                                                                                  \n",
            " lambda_10 (Lambda)             (None, 1, 1, 672)    0           ['swish_31[0][0]']               \n",
            "                                                                                                  \n",
            " conv2d_41 (Conv2D)             (None, 1, 1, 28)     18844       ['lambda_10[0][0]']              \n",
            "                                                                                                  \n",
            " swish_32 (Swish)               (None, 1, 1, 28)     0           ['conv2d_41[0][0]']              \n",
            "                                                                                                  \n",
            " conv2d_42 (Conv2D)             (None, 1, 1, 672)    19488       ['swish_32[0][0]']               \n",
            "                                                                                                  \n",
            " activation_10 (Activation)     (None, 1, 1, 672)    0           ['conv2d_42[0][0]']              \n",
            "                                                                                                  \n",
            " multiply_10 (Multiply)         (None, 10, 10, 672)  0           ['activation_10[0][0]',          \n",
            "                                                                  'swish_31[0][0]']               \n",
            "                                                                                                  \n",
            " conv2d_43 (Conv2D)             (None, 10, 10, 112)  75264       ['multiply_10[0][0]']            \n",
            "                                                                                                  \n",
            " batch_normalization_32 (BatchN  (None, 10, 10, 112)  448        ['conv2d_43[0][0]']              \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " drop_connect_5 (DropConnect)   (None, 10, 10, 112)  0           ['batch_normalization_32[0][0]'] \n",
            "                                                                                                  \n",
            " add_5 (Add)                    (None, 10, 10, 112)  0           ['drop_connect_5[0][0]',         \n",
            "                                                                  'add_4[0][0]']                  \n",
            "                                                                                                  \n",
            " conv2d_44 (Conv2D)             (None, 10, 10, 672)  75264       ['add_5[0][0]']                  \n",
            "                                                                                                  \n",
            " batch_normalization_33 (BatchN  (None, 10, 10, 672)  2688       ['conv2d_44[0][0]']              \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " swish_33 (Swish)               (None, 10, 10, 672)  0           ['batch_normalization_33[0][0]'] \n",
            "                                                                                                  \n",
            " depthwise_conv2d_11 (Depthwise  (None, 5, 5, 672)   16800       ['swish_33[0][0]']               \n",
            " Conv2D)                                                                                          \n",
            "                                                                                                  \n",
            " batch_normalization_34 (BatchN  (None, 5, 5, 672)   2688        ['depthwise_conv2d_11[0][0]']    \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " swish_34 (Swish)               (None, 5, 5, 672)    0           ['batch_normalization_34[0][0]'] \n",
            "                                                                                                  \n",
            " lambda_11 (Lambda)             (None, 1, 1, 672)    0           ['swish_34[0][0]']               \n",
            "                                                                                                  \n",
            " conv2d_45 (Conv2D)             (None, 1, 1, 28)     18844       ['lambda_11[0][0]']              \n",
            "                                                                                                  \n",
            " swish_35 (Swish)               (None, 1, 1, 28)     0           ['conv2d_45[0][0]']              \n",
            "                                                                                                  \n",
            " conv2d_46 (Conv2D)             (None, 1, 1, 672)    19488       ['swish_35[0][0]']               \n",
            "                                                                                                  \n",
            " activation_11 (Activation)     (None, 1, 1, 672)    0           ['conv2d_46[0][0]']              \n",
            "                                                                                                  \n",
            " multiply_11 (Multiply)         (None, 5, 5, 672)    0           ['activation_11[0][0]',          \n",
            "                                                                  'swish_34[0][0]']               \n",
            "                                                                                                  \n",
            " conv2d_47 (Conv2D)             (None, 5, 5, 192)    129024      ['multiply_11[0][0]']            \n",
            "                                                                                                  \n",
            " batch_normalization_35 (BatchN  (None, 5, 5, 192)   768         ['conv2d_47[0][0]']              \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " conv2d_48 (Conv2D)             (None, 5, 5, 1152)   221184      ['batch_normalization_35[0][0]'] \n",
            "                                                                                                  \n",
            " batch_normalization_36 (BatchN  (None, 5, 5, 1152)  4608        ['conv2d_48[0][0]']              \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " swish_36 (Swish)               (None, 5, 5, 1152)   0           ['batch_normalization_36[0][0]'] \n",
            "                                                                                                  \n",
            " depthwise_conv2d_12 (Depthwise  (None, 5, 5, 1152)  28800       ['swish_36[0][0]']               \n",
            " Conv2D)                                                                                          \n",
            "                                                                                                  \n",
            " batch_normalization_37 (BatchN  (None, 5, 5, 1152)  4608        ['depthwise_conv2d_12[0][0]']    \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " swish_37 (Swish)               (None, 5, 5, 1152)   0           ['batch_normalization_37[0][0]'] \n",
            "                                                                                                  \n",
            " lambda_12 (Lambda)             (None, 1, 1, 1152)   0           ['swish_37[0][0]']               \n",
            "                                                                                                  \n",
            " conv2d_49 (Conv2D)             (None, 1, 1, 48)     55344       ['lambda_12[0][0]']              \n",
            "                                                                                                  \n",
            " swish_38 (Swish)               (None, 1, 1, 48)     0           ['conv2d_49[0][0]']              \n",
            "                                                                                                  \n",
            " conv2d_50 (Conv2D)             (None, 1, 1, 1152)   56448       ['swish_38[0][0]']               \n",
            "                                                                                                  \n",
            " activation_12 (Activation)     (None, 1, 1, 1152)   0           ['conv2d_50[0][0]']              \n",
            "                                                                                                  \n",
            " multiply_12 (Multiply)         (None, 5, 5, 1152)   0           ['activation_12[0][0]',          \n",
            "                                                                  'swish_37[0][0]']               \n",
            "                                                                                                  \n",
            " conv2d_51 (Conv2D)             (None, 5, 5, 192)    221184      ['multiply_12[0][0]']            \n",
            "                                                                                                  \n",
            " batch_normalization_38 (BatchN  (None, 5, 5, 192)   768         ['conv2d_51[0][0]']              \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " drop_connect_6 (DropConnect)   (None, 5, 5, 192)    0           ['batch_normalization_38[0][0]'] \n",
            "                                                                                                  \n",
            " add_6 (Add)                    (None, 5, 5, 192)    0           ['drop_connect_6[0][0]',         \n",
            "                                                                  'batch_normalization_35[0][0]'] \n",
            "                                                                                                  \n",
            " conv2d_52 (Conv2D)             (None, 5, 5, 1152)   221184      ['add_6[0][0]']                  \n",
            "                                                                                                  \n",
            " batch_normalization_39 (BatchN  (None, 5, 5, 1152)  4608        ['conv2d_52[0][0]']              \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " swish_39 (Swish)               (None, 5, 5, 1152)   0           ['batch_normalization_39[0][0]'] \n",
            "                                                                                                  \n",
            " depthwise_conv2d_13 (Depthwise  (None, 5, 5, 1152)  28800       ['swish_39[0][0]']               \n",
            " Conv2D)                                                                                          \n",
            "                                                                                                  \n",
            " batch_normalization_40 (BatchN  (None, 5, 5, 1152)  4608        ['depthwise_conv2d_13[0][0]']    \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " swish_40 (Swish)               (None, 5, 5, 1152)   0           ['batch_normalization_40[0][0]'] \n",
            "                                                                                                  \n",
            " lambda_13 (Lambda)             (None, 1, 1, 1152)   0           ['swish_40[0][0]']               \n",
            "                                                                                                  \n",
            " conv2d_53 (Conv2D)             (None, 1, 1, 48)     55344       ['lambda_13[0][0]']              \n",
            "                                                                                                  \n",
            " swish_41 (Swish)               (None, 1, 1, 48)     0           ['conv2d_53[0][0]']              \n",
            "                                                                                                  \n",
            " conv2d_54 (Conv2D)             (None, 1, 1, 1152)   56448       ['swish_41[0][0]']               \n",
            "                                                                                                  \n",
            " activation_13 (Activation)     (None, 1, 1, 1152)   0           ['conv2d_54[0][0]']              \n",
            "                                                                                                  \n",
            " multiply_13 (Multiply)         (None, 5, 5, 1152)   0           ['activation_13[0][0]',          \n",
            "                                                                  'swish_40[0][0]']               \n",
            "                                                                                                  \n",
            " conv2d_55 (Conv2D)             (None, 5, 5, 192)    221184      ['multiply_13[0][0]']            \n",
            "                                                                                                  \n",
            " batch_normalization_41 (BatchN  (None, 5, 5, 192)   768         ['conv2d_55[0][0]']              \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " drop_connect_7 (DropConnect)   (None, 5, 5, 192)    0           ['batch_normalization_41[0][0]'] \n",
            "                                                                                                  \n",
            " add_7 (Add)                    (None, 5, 5, 192)    0           ['drop_connect_7[0][0]',         \n",
            "                                                                  'add_6[0][0]']                  \n",
            "                                                                                                  \n",
            " conv2d_56 (Conv2D)             (None, 5, 5, 1152)   221184      ['add_7[0][0]']                  \n",
            "                                                                                                  \n",
            " batch_normalization_42 (BatchN  (None, 5, 5, 1152)  4608        ['conv2d_56[0][0]']              \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " swish_42 (Swish)               (None, 5, 5, 1152)   0           ['batch_normalization_42[0][0]'] \n",
            "                                                                                                  \n",
            " depthwise_conv2d_14 (Depthwise  (None, 5, 5, 1152)  28800       ['swish_42[0][0]']               \n",
            " Conv2D)                                                                                          \n",
            "                                                                                                  \n",
            " batch_normalization_43 (BatchN  (None, 5, 5, 1152)  4608        ['depthwise_conv2d_14[0][0]']    \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " swish_43 (Swish)               (None, 5, 5, 1152)   0           ['batch_normalization_43[0][0]'] \n",
            "                                                                                                  \n",
            " lambda_14 (Lambda)             (None, 1, 1, 1152)   0           ['swish_43[0][0]']               \n",
            "                                                                                                  \n",
            " conv2d_57 (Conv2D)             (None, 1, 1, 48)     55344       ['lambda_14[0][0]']              \n",
            "                                                                                                  \n",
            " swish_44 (Swish)               (None, 1, 1, 48)     0           ['conv2d_57[0][0]']              \n",
            "                                                                                                  \n",
            " conv2d_58 (Conv2D)             (None, 1, 1, 1152)   56448       ['swish_44[0][0]']               \n",
            "                                                                                                  \n",
            " activation_14 (Activation)     (None, 1, 1, 1152)   0           ['conv2d_58[0][0]']              \n",
            "                                                                                                  \n",
            " multiply_14 (Multiply)         (None, 5, 5, 1152)   0           ['activation_14[0][0]',          \n",
            "                                                                  'swish_43[0][0]']               \n",
            "                                                                                                  \n",
            " conv2d_59 (Conv2D)             (None, 5, 5, 192)    221184      ['multiply_14[0][0]']            \n",
            "                                                                                                  \n",
            " batch_normalization_44 (BatchN  (None, 5, 5, 192)   768         ['conv2d_59[0][0]']              \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " drop_connect_8 (DropConnect)   (None, 5, 5, 192)    0           ['batch_normalization_44[0][0]'] \n",
            "                                                                                                  \n",
            " add_8 (Add)                    (None, 5, 5, 192)    0           ['drop_connect_8[0][0]',         \n",
            "                                                                  'add_7[0][0]']                  \n",
            "                                                                                                  \n",
            " conv2d_60 (Conv2D)             (None, 5, 5, 1152)   221184      ['add_8[0][0]']                  \n",
            "                                                                                                  \n",
            " batch_normalization_45 (BatchN  (None, 5, 5, 1152)  4608        ['conv2d_60[0][0]']              \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " swish_45 (Swish)               (None, 5, 5, 1152)   0           ['batch_normalization_45[0][0]'] \n",
            "                                                                                                  \n",
            " depthwise_conv2d_15 (Depthwise  (None, 5, 5, 1152)  10368       ['swish_45[0][0]']               \n",
            " Conv2D)                                                                                          \n",
            "                                                                                                  \n",
            " batch_normalization_46 (BatchN  (None, 5, 5, 1152)  4608        ['depthwise_conv2d_15[0][0]']    \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " swish_46 (Swish)               (None, 5, 5, 1152)   0           ['batch_normalization_46[0][0]'] \n",
            "                                                                                                  \n",
            " lambda_15 (Lambda)             (None, 1, 1, 1152)   0           ['swish_46[0][0]']               \n",
            "                                                                                                  \n",
            " conv2d_61 (Conv2D)             (None, 1, 1, 48)     55344       ['lambda_15[0][0]']              \n",
            "                                                                                                  \n",
            " swish_47 (Swish)               (None, 1, 1, 48)     0           ['conv2d_61[0][0]']              \n",
            "                                                                                                  \n",
            " conv2d_62 (Conv2D)             (None, 1, 1, 1152)   56448       ['swish_47[0][0]']               \n",
            "                                                                                                  \n",
            " activation_15 (Activation)     (None, 1, 1, 1152)   0           ['conv2d_62[0][0]']              \n",
            "                                                                                                  \n",
            " multiply_15 (Multiply)         (None, 5, 5, 1152)   0           ['activation_15[0][0]',          \n",
            "                                                                  'swish_46[0][0]']               \n",
            "                                                                                                  \n",
            " conv2d_63 (Conv2D)             (None, 5, 5, 320)    368640      ['multiply_15[0][0]']            \n",
            "                                                                                                  \n",
            " batch_normalization_47 (BatchN  (None, 5, 5, 320)   1280        ['conv2d_63[0][0]']              \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " conv2d_64 (Conv2D)             (None, 5, 5, 1280)   409600      ['batch_normalization_47[0][0]'] \n",
            "                                                                                                  \n",
            " batch_normalization_48 (BatchN  (None, 5, 5, 1280)  5120        ['conv2d_64[0][0]']              \n",
            " ormalization)                                                                                    \n",
            "                                                                                                  \n",
            " swish_48 (Swish)               (None, 5, 5, 1280)   0           ['batch_normalization_48[0][0]'] \n",
            "                                                                                                  \n",
            "==================================================================================================\n",
            "Total params: 4,049,564\n",
            "Trainable params: 4,007,548\n",
            "Non-trainable params: 42,016\n",
            "__________________________________________________________________________________________________\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "base_dir = '/content/drive/MyDrive/TVT_Male125'\n",
        "os.makedirs(base_dir, exist_ok=True)\n",
        "\n",
        "# Directories for our training,\n",
        "# validation and test splits\n",
        "train_dir = os.path.join(base_dir, 'train')\n",
        "os.makedirs(train_dir, exist_ok=True)\n",
        "validation_dir = os.path.join(base_dir, 'validation')\n",
        "os.makedirs(validation_dir, exist_ok=True)\n",
        "test_dir = os.path.join(base_dir, 'test')\n",
        "os.makedirs(test_dir, exist_ok=True)"
      ],
      "metadata": {
        "id": "Jwpq_-KvPef8"
      },
      "execution_count": 9,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "#load model"
      ],
      "metadata": {
        "id": "od-ZSNm5PoGy"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import sys\n",
        "sys.path.append('/content/drive/MyDrive/cut_panoramic/Model/Classification/Male/33_รอบที่3_Flimpano_Male125_250.h5')\n",
        "\n",
        "from efficientnet.layers import Swish, DropConnect\n",
        "from efficientnet.model import ConvKernalInitializer\n",
        "from tensorflow.keras.utils import get_custom_objects\n",
        "\n",
        "get_custom_objects().update({\n",
        "    'ConvKernalInitializer': ConvKernalInitializer,\n",
        "    'Swish': Swish,\n",
        "    'DropConnect':DropConnect\n",
        "})"
      ],
      "metadata": {
        "id": "n5iPL5MNPkhE"
      },
      "execution_count": 10,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#load model \n",
        "from tensorflow.keras.models import load_model\n",
        "model = load_model('/content/drive/MyDrive/cut_panoramic/Model/Classification/Male/33_รอบที่3_Flimpano_Male125_250.h5')\n",
        "height = width = model.input_shape[1]"
      ],
      "metadata": {
        "id": "plYz49xMPkly"
      },
      "execution_count": 11,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model.summary()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "z6IOPBflFbvc",
        "outputId": "4f0c5eaa-be51-4ac4-9037-9b5bcbc3b098"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"sequential\"\n",
            "_________________________________________________________________\n",
            " Layer (type)                Output Shape              Param #   \n",
            "=================================================================\n",
            " efficientnet-b0 (Functional  (None, 5, 5, 1280)       4049564   \n",
            " )                                                               \n",
            "                                                                 \n",
            " gap (GlobalMaxPooling2D)    (None, 1280)              0         \n",
            "                                                                 \n",
            " dropout_out (Dropout)       (None, 1280)              0         \n",
            "                                                                 \n",
            " fc_out (Dense)              (None, 19)                24339     \n",
            "                                                                 \n",
            "=================================================================\n",
            "Total params: 4,073,903\n",
            "Trainable params: 24,339\n",
            "Non-trainable params: 4,049,564\n",
            "_________________________________________________________________\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Train ด้วย ImageDataGenerator ของ Keras ซึ่งจะเพิ่มข้อมูลเสริมระหว่างการฝึกเพื่อลดโอกาสเกิด overfitting\n",
        "#overfitting เกิดจากข้อมูลที่ซับซ้อนกันเกินไป\n",
        "from tensorflow.keras.preprocessing.image import ImageDataGenerator\n",
        "\n",
        "train_datagen = ImageDataGenerator(\n",
        "      rescale=1./255, #โมเดลส่วนใหญ่ต้องใช้ RGB ในช่วง 0–1\n",
        "      rotation_range=40,\n",
        "      width_shift_range=0.2,\n",
        "      height_shift_range=0.2,\n",
        "      shear_range=0.2,\n",
        "      zoom_range=0.2,\n",
        "      horizontal_flip=True,\n",
        "      fill_mode='nearest')\n",
        "\n",
        "# Note that the validation data should not be augmented!\n",
        "test_datagen = ImageDataGenerator(rescale=1./255)\n",
        "\n",
        "train_generator = train_datagen.flow_from_directory(\n",
        "        # This is the target directory #ไดเรกเป้าหมาย\n",
        "        train_dir,\n",
        "        # รูปภาพทั้งหมดจะถูกปรับขนาดตามความสูงและความกว้างของเป้าหมาย\n",
        "        target_size=(height, width),\n",
        "        batch_size=batch_size,\n",
        "        # Since we use categorical_crossentropy loss, we need categorical labels\n",
        "        #เนื่องจากเราใช้ categorical_crossentropy loss เราจึงต้องมีป้ายกำกับตามหมวดหมู่\n",
        "        class_mode='categorical')\n",
        "\n",
        "validation_generator = test_datagen.flow_from_directory( #การดึงภาพจาก Directory มาเข้าโมเดล \n",
        "        validation_dir,\n",
        "        target_size=(height, width),\n",
        "        batch_size=batch_size,\n",
        "        class_mode='categorical')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KBMZbdr2Pgw4",
        "outputId": "adba895b-7a73-4667-e894-d5d12287b278"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Found 1425 images belonging to 19 classes.\n",
            "Found 475 images belonging to 19 classes.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# multiply_16\n",
        "# set 'multiply_16' and following layers trainable\n",
        "model.trainable = True\n",
        "\n",
        "set_trainable = False\n",
        "for layer in conv_base.layers:\n",
        "    if layer.name == 'multiply_16':\n",
        "        set_trainable = True\n",
        "    if set_trainable:\n",
        "        layer.trainable = True\n",
        "    else:\n",
        "        layer.trainable = False  "
      ],
      "metadata": {
        "id": "2SmWJJlZ0K0g"
      },
      "execution_count": 14,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model.summary()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gqOZnbxjGmFY",
        "outputId": "c1d30814-0f1f-4a28-e3ae-32dd008ad63c"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"sequential\"\n",
            "_________________________________________________________________\n",
            " Layer (type)                Output Shape              Param #   \n",
            "=================================================================\n",
            " efficientnet-b0 (Functional  (None, 5, 5, 1280)       4049564   \n",
            " )                                                               \n",
            "                                                                 \n",
            " gap (GlobalMaxPooling2D)    (None, 1280)              0         \n",
            "                                                                 \n",
            " dropout_out (Dropout)       (None, 1280)              0         \n",
            "                                                                 \n",
            " fc_out (Dense)              (None, 19)                24339     \n",
            "                                                                 \n",
            "=================================================================\n",
            "Total params: 4,073,903\n",
            "Trainable params: 4,031,887\n",
            "Non-trainable params: 42,016\n",
            "_________________________________________________________________\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "model.compile(loss='categorical_crossentropy',\n",
        "              optimizer=optimizers.RMSprop(learning_rate=2e-5),\n",
        "              metrics=['acc'])\n",
        "history = model.fit_generator(\n",
        "      train_generator,\n",
        "      steps_per_epoch= NUM_TRAIN //batch_size,\n",
        "      epochs=epochs,\n",
        "      validation_data=validation_generator,\n",
        "      validation_steps= NUM_TEST //batch_size,\n",
        "      verbose=1,\n",
        "      use_multiprocessing=True,\n",
        "      workers=4)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "C9Cf1dwyP1PD",
        "outputId": "fe0a7da6-eaf9-4b5f-c39d-aa61e6842a2e"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-16-95ae5648fc7b>:4: UserWarning: `Model.fit_generator` is deprecated and will be removed in a future version. Please use `Model.fit`, which supports generators.\n",
            "  history = model.fit_generator(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/250\n",
            "89/89 [==============================] - 127s 937ms/step - loss: 23.9664 - acc: 0.0476 - val_loss: 5.5500 - val_acc: 0.1013\n",
            "Epoch 2/250\n",
            "89/89 [==============================] - 27s 299ms/step - loss: 12.7928 - acc: 0.0731 - val_loss: 9.3033 - val_acc: 0.0754\n",
            "Epoch 3/250\n",
            "89/89 [==============================] - 28s 307ms/step - loss: 6.6349 - acc: 0.1029 - val_loss: 8.9663 - val_acc: 0.0711\n",
            "Epoch 4/250\n",
            "89/89 [==============================] - 29s 318ms/step - loss: 4.4961 - acc: 0.1207 - val_loss: 8.4618 - val_acc: 0.0733\n",
            "Epoch 5/250\n",
            "89/89 [==============================] - 29s 321ms/step - loss: 4.0123 - acc: 0.1348 - val_loss: 7.9458 - val_acc: 0.0754\n",
            "Epoch 6/250\n",
            "89/89 [==============================] - 29s 324ms/step - loss: 3.7570 - acc: 0.1391 - val_loss: 7.4583 - val_acc: 0.0819\n",
            "Epoch 7/250\n",
            "89/89 [==============================] - 29s 324ms/step - loss: 3.5475 - acc: 0.1498 - val_loss: 6.0847 - val_acc: 0.1013\n",
            "Epoch 8/250\n",
            "89/89 [==============================] - 29s 319ms/step - loss: 3.4741 - acc: 0.1568 - val_loss: 4.5057 - val_acc: 0.1293\n",
            "Epoch 9/250\n",
            "89/89 [==============================] - 29s 318ms/step - loss: 3.3601 - acc: 0.1583 - val_loss: 4.0954 - val_acc: 0.1487\n",
            "Epoch 10/250\n",
            "89/89 [==============================] - 29s 318ms/step - loss: 3.2958 - acc: 0.1647 - val_loss: 3.8856 - val_acc: 0.1444\n",
            "Epoch 11/250\n",
            "89/89 [==============================] - 25s 270ms/step - loss: 3.1988 - acc: 0.1732 - val_loss: 3.9493 - val_acc: 0.1573\n",
            "Epoch 12/250\n",
            "89/89 [==============================] - 25s 275ms/step - loss: 3.0746 - acc: 0.1710 - val_loss: 4.0237 - val_acc: 0.1422\n",
            "Epoch 13/250\n",
            "89/89 [==============================] - 29s 323ms/step - loss: 2.9243 - acc: 0.1824 - val_loss: 4.0960 - val_acc: 0.1401\n",
            "Epoch 14/250\n",
            "89/89 [==============================] - 30s 325ms/step - loss: 2.9681 - acc: 0.1753 - val_loss: 3.9827 - val_acc: 0.1358\n",
            "Epoch 15/250\n",
            "89/89 [==============================] - 24s 264ms/step - loss: 2.8651 - acc: 0.1930 - val_loss: 3.8367 - val_acc: 0.1336\n",
            "Epoch 16/250\n",
            "89/89 [==============================] - 29s 321ms/step - loss: 2.8384 - acc: 0.1909 - val_loss: 3.8004 - val_acc: 0.1293\n",
            "Epoch 17/250\n",
            "89/89 [==============================] - 29s 320ms/step - loss: 2.7792 - acc: 0.1902 - val_loss: 3.7803 - val_acc: 0.1422\n",
            "Epoch 18/250\n",
            "89/89 [==============================] - 25s 267ms/step - loss: 2.7058 - acc: 0.2101 - val_loss: 3.7405 - val_acc: 0.1466\n",
            "Epoch 19/250\n",
            "89/89 [==============================] - 25s 271ms/step - loss: 2.6477 - acc: 0.2051 - val_loss: 3.7007 - val_acc: 0.1401\n",
            "Epoch 20/250\n",
            "89/89 [==============================] - 29s 317ms/step - loss: 2.5926 - acc: 0.1994 - val_loss: 3.7111 - val_acc: 0.1358\n",
            "Epoch 21/250\n",
            "89/89 [==============================] - 29s 320ms/step - loss: 2.5200 - acc: 0.2143 - val_loss: 3.6012 - val_acc: 0.1358\n",
            "Epoch 22/250\n",
            "89/89 [==============================] - 29s 319ms/step - loss: 2.5306 - acc: 0.2278 - val_loss: 3.4922 - val_acc: 0.1466\n",
            "Epoch 23/250\n",
            "89/89 [==============================] - 30s 325ms/step - loss: 2.4200 - acc: 0.2378 - val_loss: 3.4697 - val_acc: 0.1422\n",
            "Epoch 24/250\n",
            "89/89 [==============================] - 29s 320ms/step - loss: 2.3978 - acc: 0.2221 - val_loss: 3.4017 - val_acc: 0.1530\n",
            "Epoch 25/250\n",
            "89/89 [==============================] - 29s 317ms/step - loss: 2.3773 - acc: 0.2300 - val_loss: 3.4047 - val_acc: 0.1573\n",
            "Epoch 26/250\n",
            "89/89 [==============================] - 29s 313ms/step - loss: 2.3358 - acc: 0.2420 - val_loss: 3.3961 - val_acc: 0.1509\n",
            "Epoch 27/250\n",
            "89/89 [==============================] - 29s 305ms/step - loss: 2.3803 - acc: 0.2129 - val_loss: 3.2523 - val_acc: 0.1487\n",
            "Epoch 28/250\n",
            "89/89 [==============================] - 29s 308ms/step - loss: 2.3397 - acc: 0.2427 - val_loss: 3.2354 - val_acc: 0.1530\n",
            "Epoch 29/250\n",
            "89/89 [==============================] - 28s 296ms/step - loss: 2.2589 - acc: 0.2250 - val_loss: 3.2567 - val_acc: 0.1530\n",
            "Epoch 30/250\n",
            "89/89 [==============================] - 23s 244ms/step - loss: 2.2193 - acc: 0.2441 - val_loss: 3.2402 - val_acc: 0.1509\n",
            "Epoch 31/250\n",
            "89/89 [==============================] - 24s 261ms/step - loss: 2.2356 - acc: 0.2434 - val_loss: 3.2668 - val_acc: 0.1466\n",
            "Epoch 32/250\n",
            "89/89 [==============================] - 28s 298ms/step - loss: 2.2276 - acc: 0.2413 - val_loss: 3.1979 - val_acc: 0.1509\n",
            "Epoch 33/250\n",
            "89/89 [==============================] - 28s 308ms/step - loss: 2.2310 - acc: 0.2427 - val_loss: 3.1459 - val_acc: 0.1638\n",
            "Epoch 34/250\n",
            "89/89 [==============================] - 28s 309ms/step - loss: 2.1639 - acc: 0.2413 - val_loss: 3.0677 - val_acc: 0.1552\n",
            "Epoch 35/250\n",
            "89/89 [==============================] - 29s 322ms/step - loss: 2.1144 - acc: 0.2697 - val_loss: 3.0844 - val_acc: 0.1616\n",
            "Epoch 36/250\n",
            "89/89 [==============================] - 25s 273ms/step - loss: 2.1744 - acc: 0.2520 - val_loss: 3.0550 - val_acc: 0.1595\n",
            "Epoch 37/250\n",
            "89/89 [==============================] - 29s 323ms/step - loss: 2.0720 - acc: 0.2789 - val_loss: 3.0249 - val_acc: 0.1595\n",
            "Epoch 38/250\n",
            "89/89 [==============================] - 29s 321ms/step - loss: 2.0944 - acc: 0.2725 - val_loss: 3.0001 - val_acc: 0.1659\n",
            "Epoch 39/250\n",
            "89/89 [==============================] - 29s 323ms/step - loss: 2.0327 - acc: 0.2910 - val_loss: 2.9979 - val_acc: 0.1638\n",
            "Epoch 40/250\n",
            "89/89 [==============================] - 29s 323ms/step - loss: 2.0566 - acc: 0.2796 - val_loss: 2.9206 - val_acc: 0.1638\n",
            "Epoch 41/250\n",
            "89/89 [==============================] - 29s 317ms/step - loss: 2.0856 - acc: 0.2718 - val_loss: 2.8848 - val_acc: 0.1616\n",
            "Epoch 42/250\n",
            "89/89 [==============================] - 24s 262ms/step - loss: 2.0357 - acc: 0.2846 - val_loss: 2.8969 - val_acc: 0.1832\n",
            "Epoch 43/250\n",
            "89/89 [==============================] - 29s 313ms/step - loss: 2.0280 - acc: 0.2860 - val_loss: 2.9515 - val_acc: 0.1746\n",
            "Epoch 44/250\n",
            "89/89 [==============================] - 29s 310ms/step - loss: 1.9902 - acc: 0.3031 - val_loss: 2.9415 - val_acc: 0.1659\n",
            "Epoch 45/250\n",
            "89/89 [==============================] - 27s 296ms/step - loss: 1.9902 - acc: 0.3059 - val_loss: 2.9694 - val_acc: 0.1681\n",
            "Epoch 46/250\n",
            "89/89 [==============================] - 27s 294ms/step - loss: 1.9737 - acc: 0.2988 - val_loss: 3.0267 - val_acc: 0.1573\n",
            "Epoch 47/250\n",
            "89/89 [==============================] - 28s 310ms/step - loss: 1.9708 - acc: 0.3201 - val_loss: 2.9655 - val_acc: 0.1659\n",
            "Epoch 48/250\n",
            "89/89 [==============================] - 29s 323ms/step - loss: 1.8832 - acc: 0.3293 - val_loss: 3.0899 - val_acc: 0.1616\n",
            "Epoch 49/250\n",
            "89/89 [==============================] - 24s 262ms/step - loss: 1.9557 - acc: 0.3016 - val_loss: 3.0739 - val_acc: 0.1724\n",
            "Epoch 50/250\n",
            "89/89 [==============================] - 27s 297ms/step - loss: 1.9176 - acc: 0.3059 - val_loss: 3.1350 - val_acc: 0.1530\n",
            "Epoch 51/250\n",
            "89/89 [==============================] - 23s 247ms/step - loss: 1.8979 - acc: 0.3222 - val_loss: 3.0910 - val_acc: 0.1595\n",
            "Epoch 52/250\n",
            "89/89 [==============================] - 29s 309ms/step - loss: 1.8899 - acc: 0.3002 - val_loss: 3.0521 - val_acc: 0.1681\n",
            "Epoch 53/250\n",
            "89/89 [==============================] - 30s 321ms/step - loss: 1.9052 - acc: 0.3201 - val_loss: 3.0903 - val_acc: 0.1638\n",
            "Epoch 54/250\n",
            "89/89 [==============================] - 28s 302ms/step - loss: 1.8570 - acc: 0.3414 - val_loss: 3.0839 - val_acc: 0.1595\n",
            "Epoch 55/250\n",
            "89/89 [==============================] - 23s 246ms/step - loss: 1.8392 - acc: 0.3471 - val_loss: 3.0495 - val_acc: 0.1509\n",
            "Epoch 56/250\n",
            "89/89 [==============================] - 28s 304ms/step - loss: 1.8817 - acc: 0.3258 - val_loss: 3.0590 - val_acc: 0.1616\n",
            "Epoch 57/250\n",
            "89/89 [==============================] - 30s 323ms/step - loss: 1.8321 - acc: 0.3549 - val_loss: 3.0896 - val_acc: 0.1573\n",
            "Epoch 58/250\n",
            "89/89 [==============================] - 30s 324ms/step - loss: 1.8196 - acc: 0.3513 - val_loss: 3.0271 - val_acc: 0.1552\n",
            "Epoch 59/250\n",
            "89/89 [==============================] - 30s 324ms/step - loss: 1.8165 - acc: 0.3462 - val_loss: 2.9902 - val_acc: 0.1638\n",
            "Epoch 60/250\n",
            "89/89 [==============================] - 29s 323ms/step - loss: 1.8494 - acc: 0.3406 - val_loss: 3.1487 - val_acc: 0.1638\n",
            "Epoch 61/250\n",
            "89/89 [==============================] - 30s 329ms/step - loss: 1.8133 - acc: 0.3485 - val_loss: 3.0728 - val_acc: 0.1681\n",
            "Epoch 62/250\n",
            "89/89 [==============================] - 30s 324ms/step - loss: 1.7995 - acc: 0.3520 - val_loss: 3.0548 - val_acc: 0.1552\n",
            "Epoch 63/250\n",
            "89/89 [==============================] - 29s 320ms/step - loss: 1.7573 - acc: 0.3818 - val_loss: 3.1385 - val_acc: 0.1595\n",
            "Epoch 64/250\n",
            "89/89 [==============================] - 29s 323ms/step - loss: 1.7226 - acc: 0.3974 - val_loss: 3.0616 - val_acc: 0.1767\n",
            "Epoch 65/250\n",
            "89/89 [==============================] - 30s 327ms/step - loss: 1.7417 - acc: 0.3588 - val_loss: 2.9865 - val_acc: 0.1746\n",
            "Epoch 66/250\n",
            "89/89 [==============================] - 23s 247ms/step - loss: 1.7424 - acc: 0.3868 - val_loss: 2.9886 - val_acc: 0.1703\n",
            "Epoch 67/250\n",
            "89/89 [==============================] - 28s 309ms/step - loss: 1.7612 - acc: 0.3584 - val_loss: 3.1487 - val_acc: 0.1703\n",
            "Epoch 68/250\n",
            "89/89 [==============================] - 28s 301ms/step - loss: 1.7220 - acc: 0.3818 - val_loss: 3.2026 - val_acc: 0.1595\n",
            "Epoch 69/250\n",
            "89/89 [==============================] - 24s 264ms/step - loss: 1.6937 - acc: 0.3854 - val_loss: 3.1902 - val_acc: 0.1638\n",
            "Epoch 70/250\n",
            "89/89 [==============================] - 30s 326ms/step - loss: 1.7338 - acc: 0.3811 - val_loss: 3.0097 - val_acc: 0.1746\n",
            "Epoch 71/250\n",
            "89/89 [==============================] - 25s 271ms/step - loss: 1.7349 - acc: 0.3797 - val_loss: 2.9913 - val_acc: 0.1703\n",
            "Epoch 72/250\n",
            "89/89 [==============================] - 30s 328ms/step - loss: 1.7147 - acc: 0.3818 - val_loss: 2.9783 - val_acc: 0.1724\n",
            "Epoch 73/250\n",
            "89/89 [==============================] - 29s 322ms/step - loss: 1.6414 - acc: 0.4180 - val_loss: 2.8845 - val_acc: 0.1789\n",
            "Epoch 74/250\n",
            "89/89 [==============================] - 30s 323ms/step - loss: 1.7066 - acc: 0.3896 - val_loss: 2.9801 - val_acc: 0.1724\n",
            "Epoch 75/250\n",
            "89/89 [==============================] - 29s 322ms/step - loss: 1.6397 - acc: 0.3925 - val_loss: 3.0073 - val_acc: 0.1832\n",
            "Epoch 76/250\n",
            "89/89 [==============================] - 30s 326ms/step - loss: 1.6188 - acc: 0.4209 - val_loss: 3.0113 - val_acc: 0.1746\n",
            "Epoch 77/250\n",
            "89/89 [==============================] - 30s 326ms/step - loss: 1.5897 - acc: 0.4351 - val_loss: 2.9914 - val_acc: 0.1789\n",
            "Epoch 78/250\n",
            "89/89 [==============================] - 30s 326ms/step - loss: 1.6179 - acc: 0.4223 - val_loss: 3.0422 - val_acc: 0.1832\n",
            "Epoch 79/250\n",
            "89/89 [==============================] - 29s 321ms/step - loss: 1.6085 - acc: 0.4301 - val_loss: 3.0968 - val_acc: 0.1767\n",
            "Epoch 80/250\n",
            "89/89 [==============================] - 30s 325ms/step - loss: 1.6206 - acc: 0.4145 - val_loss: 3.1161 - val_acc: 0.1832\n",
            "Epoch 81/250\n",
            "89/89 [==============================] - 25s 271ms/step - loss: 1.5602 - acc: 0.4315 - val_loss: 3.1832 - val_acc: 0.1810\n",
            "Epoch 82/250\n",
            "89/89 [==============================] - 28s 310ms/step - loss: 1.5708 - acc: 0.4429 - val_loss: 3.1226 - val_acc: 0.1832\n",
            "Epoch 83/250\n",
            "89/89 [==============================] - 29s 318ms/step - loss: 1.5976 - acc: 0.4202 - val_loss: 3.1066 - val_acc: 0.1746\n",
            "Epoch 84/250\n",
            "89/89 [==============================] - 30s 331ms/step - loss: 1.5506 - acc: 0.4315 - val_loss: 3.0383 - val_acc: 0.1767\n",
            "Epoch 85/250\n",
            "89/89 [==============================] - 29s 321ms/step - loss: 1.5574 - acc: 0.4372 - val_loss: 3.1101 - val_acc: 0.1789\n",
            "Epoch 86/250\n",
            "89/89 [==============================] - 29s 321ms/step - loss: 1.5607 - acc: 0.4414 - val_loss: 3.1908 - val_acc: 0.1789\n",
            "Epoch 87/250\n",
            "89/89 [==============================] - 25s 270ms/step - loss: 1.5595 - acc: 0.4521 - val_loss: 3.1799 - val_acc: 0.1767\n",
            "Epoch 88/250\n",
            "89/89 [==============================] - 27s 300ms/step - loss: 1.5400 - acc: 0.4414 - val_loss: 3.1428 - val_acc: 0.1810\n",
            "Epoch 89/250\n",
            "89/89 [==============================] - 29s 313ms/step - loss: 1.5002 - acc: 0.4613 - val_loss: 2.9998 - val_acc: 0.1897\n",
            "Epoch 90/250\n",
            "89/89 [==============================] - 29s 314ms/step - loss: 1.5117 - acc: 0.4464 - val_loss: 3.0952 - val_acc: 0.1789\n",
            "Epoch 91/250\n",
            "89/89 [==============================] - 30s 325ms/step - loss: 1.5115 - acc: 0.4762 - val_loss: 3.1197 - val_acc: 0.1897\n",
            "Epoch 92/250\n",
            "89/89 [==============================] - 29s 323ms/step - loss: 1.4968 - acc: 0.4634 - val_loss: 3.0631 - val_acc: 0.1875\n",
            "Epoch 93/250\n",
            "89/89 [==============================] - 29s 323ms/step - loss: 1.4551 - acc: 0.4791 - val_loss: 3.1613 - val_acc: 0.1810\n",
            "Epoch 94/250\n",
            "89/89 [==============================] - 25s 268ms/step - loss: 1.4710 - acc: 0.4762 - val_loss: 3.1282 - val_acc: 0.1810\n",
            "Epoch 95/250\n",
            "89/89 [==============================] - 25s 268ms/step - loss: 1.4607 - acc: 0.4791 - val_loss: 3.1878 - val_acc: 0.1789\n",
            "Epoch 96/250\n",
            "89/89 [==============================] - 28s 303ms/step - loss: 1.4852 - acc: 0.4585 - val_loss: 3.1494 - val_acc: 0.1681\n",
            "Epoch 97/250\n",
            "89/89 [==============================] - 28s 306ms/step - loss: 1.4802 - acc: 0.4507 - val_loss: 3.1971 - val_acc: 0.1746\n",
            "Epoch 98/250\n",
            "89/89 [==============================] - 29s 313ms/step - loss: 1.4623 - acc: 0.4805 - val_loss: 3.1959 - val_acc: 0.1724\n",
            "Epoch 99/250\n",
            "89/89 [==============================] - 30s 331ms/step - loss: 1.4194 - acc: 0.5039 - val_loss: 3.1441 - val_acc: 0.1853\n",
            "Epoch 100/250\n",
            "89/89 [==============================] - 30s 326ms/step - loss: 1.4299 - acc: 0.4925 - val_loss: 3.1762 - val_acc: 0.1789\n",
            "Epoch 101/250\n",
            "89/89 [==============================] - 30s 324ms/step - loss: 1.4114 - acc: 0.4968 - val_loss: 3.1994 - val_acc: 0.1832\n",
            "Epoch 102/250\n",
            "89/89 [==============================] - 30s 329ms/step - loss: 1.3957 - acc: 0.4996 - val_loss: 3.2750 - val_acc: 0.1832\n",
            "Epoch 103/250\n",
            "89/89 [==============================] - 30s 326ms/step - loss: 1.4063 - acc: 0.5004 - val_loss: 3.1854 - val_acc: 0.1940\n",
            "Epoch 104/250\n",
            "89/89 [==============================] - 29s 322ms/step - loss: 1.4261 - acc: 0.4940 - val_loss: 3.1883 - val_acc: 0.1681\n",
            "Epoch 105/250\n",
            "89/89 [==============================] - 29s 320ms/step - loss: 1.3477 - acc: 0.5330 - val_loss: 3.2807 - val_acc: 0.1746\n",
            "Epoch 106/250\n",
            "89/89 [==============================] - 30s 321ms/step - loss: 1.3665 - acc: 0.5202 - val_loss: 3.3495 - val_acc: 0.1832\n",
            "Epoch 107/250\n",
            "89/89 [==============================] - 24s 248ms/step - loss: 1.3789 - acc: 0.5160 - val_loss: 3.3482 - val_acc: 0.1853\n",
            "Epoch 108/250\n",
            "89/89 [==============================] - 24s 266ms/step - loss: 1.3296 - acc: 0.5096 - val_loss: 3.2437 - val_acc: 0.1940\n",
            "Epoch 109/250\n",
            "89/89 [==============================] - 29s 318ms/step - loss: 1.3187 - acc: 0.5302 - val_loss: 3.2469 - val_acc: 0.1853\n",
            "Epoch 110/250\n",
            "89/89 [==============================] - 24s 266ms/step - loss: 1.2931 - acc: 0.5373 - val_loss: 3.2766 - val_acc: 0.1918\n",
            "Epoch 111/250\n",
            "89/89 [==============================] - 29s 321ms/step - loss: 1.3248 - acc: 0.5273 - val_loss: 3.2527 - val_acc: 0.2047\n",
            "Epoch 112/250\n",
            "89/89 [==============================] - 29s 321ms/step - loss: 1.2845 - acc: 0.5287 - val_loss: 3.2927 - val_acc: 0.2026\n",
            "Epoch 113/250\n",
            "89/89 [==============================] - 30s 326ms/step - loss: 1.2482 - acc: 0.5635 - val_loss: 3.3451 - val_acc: 0.1961\n",
            "Epoch 114/250\n",
            "89/89 [==============================] - 29s 313ms/step - loss: 1.2801 - acc: 0.5394 - val_loss: 3.3093 - val_acc: 0.2047\n",
            "Epoch 115/250\n",
            "89/89 [==============================] - 29s 319ms/step - loss: 1.2425 - acc: 0.5593 - val_loss: 3.3972 - val_acc: 0.1897\n",
            "Epoch 116/250\n",
            "89/89 [==============================] - 29s 320ms/step - loss: 1.2877 - acc: 0.5373 - val_loss: 3.3266 - val_acc: 0.1961\n",
            "Epoch 117/250\n",
            "89/89 [==============================] - 30s 321ms/step - loss: 1.2505 - acc: 0.5351 - val_loss: 3.3869 - val_acc: 0.1961\n",
            "Epoch 118/250\n",
            "89/89 [==============================] - 29s 304ms/step - loss: 1.2184 - acc: 0.5756 - val_loss: 3.4400 - val_acc: 0.2112\n",
            "Epoch 119/250\n",
            "89/89 [==============================] - 23s 254ms/step - loss: 1.2293 - acc: 0.5685 - val_loss: 3.4469 - val_acc: 0.2069\n",
            "Epoch 120/250\n",
            "89/89 [==============================] - 25s 270ms/step - loss: 1.1951 - acc: 0.5671 - val_loss: 3.4072 - val_acc: 0.2069\n",
            "Epoch 121/250\n",
            "89/89 [==============================] - 29s 322ms/step - loss: 1.1926 - acc: 0.5600 - val_loss: 3.4991 - val_acc: 0.2069\n",
            "Epoch 122/250\n",
            "89/89 [==============================] - 29s 322ms/step - loss: 1.1659 - acc: 0.6167 - val_loss: 3.4175 - val_acc: 0.2091\n",
            "Epoch 123/250\n",
            "89/89 [==============================] - 29s 322ms/step - loss: 1.1928 - acc: 0.5685 - val_loss: 3.3876 - val_acc: 0.2091\n",
            "Epoch 124/250\n",
            "89/89 [==============================] - 29s 314ms/step - loss: 1.1393 - acc: 0.5955 - val_loss: 3.5297 - val_acc: 0.1940\n",
            "Epoch 125/250\n",
            "89/89 [==============================] - 29s 322ms/step - loss: 1.1849 - acc: 0.5820 - val_loss: 3.4528 - val_acc: 0.1961\n",
            "Epoch 126/250\n",
            "89/89 [==============================] - 29s 321ms/step - loss: 1.1641 - acc: 0.5919 - val_loss: 3.3852 - val_acc: 0.2091\n",
            "Epoch 127/250\n",
            "89/89 [==============================] - 29s 314ms/step - loss: 1.1801 - acc: 0.5834 - val_loss: 3.4574 - val_acc: 0.1940\n",
            "Epoch 128/250\n",
            "89/89 [==============================] - 29s 313ms/step - loss: 1.2217 - acc: 0.5720 - val_loss: 3.4043 - val_acc: 0.1940\n",
            "Epoch 129/250\n",
            "89/89 [==============================] - 24s 261ms/step - loss: 1.1343 - acc: 0.6061 - val_loss: 3.4528 - val_acc: 0.1897\n",
            "Epoch 130/250\n",
            "89/89 [==============================] - 30s 321ms/step - loss: 1.1405 - acc: 0.5862 - val_loss: 3.4893 - val_acc: 0.2004\n",
            "Epoch 131/250\n",
            "89/89 [==============================] - 29s 311ms/step - loss: 1.1132 - acc: 0.5912 - val_loss: 3.4805 - val_acc: 0.2047\n",
            "Epoch 132/250\n",
            "89/89 [==============================] - 28s 303ms/step - loss: 1.1413 - acc: 0.5813 - val_loss: 3.5929 - val_acc: 0.2069\n",
            "Epoch 133/250\n",
            "89/89 [==============================] - 28s 311ms/step - loss: 1.1262 - acc: 0.6082 - val_loss: 3.6270 - val_acc: 0.1961\n",
            "Epoch 134/250\n",
            "89/89 [==============================] - 30s 324ms/step - loss: 1.1291 - acc: 0.5940 - val_loss: 3.7165 - val_acc: 0.1810\n",
            "Epoch 135/250\n",
            "89/89 [==============================] - 30s 323ms/step - loss: 1.0727 - acc: 0.6210 - val_loss: 3.8269 - val_acc: 0.1853\n",
            "Epoch 136/250\n",
            "89/89 [==============================] - 26s 279ms/step - loss: 1.0805 - acc: 0.6260 - val_loss: 3.6365 - val_acc: 0.2004\n",
            "Epoch 137/250\n",
            "89/89 [==============================] - 23s 248ms/step - loss: 1.0574 - acc: 0.6238 - val_loss: 3.6422 - val_acc: 0.1983\n",
            "Epoch 138/250\n",
            "89/89 [==============================] - 25s 270ms/step - loss: 1.0557 - acc: 0.6167 - val_loss: 3.6358 - val_acc: 0.1961\n",
            "Epoch 139/250\n",
            "89/89 [==============================] - 28s 301ms/step - loss: 1.0234 - acc: 0.6473 - val_loss: 3.7222 - val_acc: 0.1897\n",
            "Epoch 140/250\n",
            "89/89 [==============================] - 28s 305ms/step - loss: 1.0572 - acc: 0.6210 - val_loss: 3.7794 - val_acc: 0.1918\n",
            "Epoch 141/250\n",
            "89/89 [==============================] - 29s 323ms/step - loss: 1.0661 - acc: 0.6210 - val_loss: 3.6597 - val_acc: 0.1918\n",
            "Epoch 142/250\n",
            "89/89 [==============================] - 25s 268ms/step - loss: 1.0033 - acc: 0.6515 - val_loss: 3.6141 - val_acc: 0.1853\n",
            "Epoch 143/250\n",
            "89/89 [==============================] - 30s 330ms/step - loss: 1.0468 - acc: 0.6260 - val_loss: 3.5600 - val_acc: 0.1897\n",
            "Epoch 144/250\n",
            "89/89 [==============================] - 30s 332ms/step - loss: 1.0069 - acc: 0.6537 - val_loss: 3.7083 - val_acc: 0.1832\n",
            "Epoch 145/250\n",
            "89/89 [==============================] - 30s 325ms/step - loss: 0.9567 - acc: 0.6735 - val_loss: 3.8372 - val_acc: 0.1875\n",
            "Epoch 146/250\n",
            "89/89 [==============================] - 30s 323ms/step - loss: 1.0234 - acc: 0.6551 - val_loss: 3.8868 - val_acc: 0.1767\n",
            "Epoch 147/250\n",
            "89/89 [==============================] - 24s 266ms/step - loss: 0.9958 - acc: 0.6444 - val_loss: 3.8748 - val_acc: 0.1789\n",
            "Epoch 148/250\n",
            "89/89 [==============================] - 30s 330ms/step - loss: 0.9685 - acc: 0.6728 - val_loss: 3.8791 - val_acc: 0.1853\n",
            "Epoch 149/250\n",
            "89/89 [==============================] - 29s 318ms/step - loss: 0.9267 - acc: 0.6735 - val_loss: 3.8229 - val_acc: 0.1940\n",
            "Epoch 150/250\n",
            "89/89 [==============================] - 29s 319ms/step - loss: 0.9504 - acc: 0.6522 - val_loss: 3.8944 - val_acc: 0.1875\n",
            "Epoch 151/250\n",
            "89/89 [==============================] - 29s 316ms/step - loss: 0.9401 - acc: 0.6650 - val_loss: 3.7739 - val_acc: 0.1961\n",
            "Epoch 152/250\n",
            "89/89 [==============================] - 29s 321ms/step - loss: 0.9184 - acc: 0.6650 - val_loss: 3.7947 - val_acc: 0.1983\n",
            "Epoch 153/250\n",
            "89/89 [==============================] - 25s 273ms/step - loss: 0.9728 - acc: 0.6572 - val_loss: 3.8959 - val_acc: 0.1918\n",
            "Epoch 154/250\n",
            "89/89 [==============================] - 29s 322ms/step - loss: 0.9327 - acc: 0.6749 - val_loss: 3.9035 - val_acc: 0.1918\n",
            "Epoch 155/250\n",
            "89/89 [==============================] - 29s 317ms/step - loss: 0.9391 - acc: 0.6650 - val_loss: 3.9252 - val_acc: 0.1897\n",
            "Epoch 156/250\n",
            "89/89 [==============================] - 29s 317ms/step - loss: 0.9022 - acc: 0.6714 - val_loss: 3.9141 - val_acc: 0.1810\n",
            "Epoch 157/250\n",
            "89/89 [==============================] - 30s 322ms/step - loss: 0.8760 - acc: 0.7005 - val_loss: 3.9386 - val_acc: 0.1853\n",
            "Epoch 158/250\n",
            "89/89 [==============================] - 24s 256ms/step - loss: 0.8517 - acc: 0.7090 - val_loss: 4.0845 - val_acc: 0.1746\n",
            "Epoch 159/250\n",
            "89/89 [==============================] - 28s 300ms/step - loss: 0.8753 - acc: 0.6906 - val_loss: 4.0547 - val_acc: 0.1832\n",
            "Epoch 160/250\n",
            "89/89 [==============================] - 23s 252ms/step - loss: 0.8983 - acc: 0.6785 - val_loss: 4.0231 - val_acc: 0.1853\n",
            "Epoch 161/250\n",
            "89/89 [==============================] - 24s 258ms/step - loss: 0.8493 - acc: 0.7048 - val_loss: 4.0550 - val_acc: 0.1789\n",
            "Epoch 162/250\n",
            "89/89 [==============================] - 29s 324ms/step - loss: 0.8321 - acc: 0.7083 - val_loss: 4.0705 - val_acc: 0.1767\n",
            "Epoch 163/250\n",
            "89/89 [==============================] - 30s 332ms/step - loss: 0.8564 - acc: 0.6828 - val_loss: 4.0118 - val_acc: 0.1961\n",
            "Epoch 164/250\n",
            "89/89 [==============================] - 29s 320ms/step - loss: 0.8550 - acc: 0.7026 - val_loss: 4.0530 - val_acc: 0.1789\n",
            "Epoch 165/250\n",
            "89/89 [==============================] - 29s 322ms/step - loss: 0.8215 - acc: 0.7097 - val_loss: 4.1960 - val_acc: 0.1918\n",
            "Epoch 166/250\n",
            "89/89 [==============================] - 30s 327ms/step - loss: 0.7949 - acc: 0.7204 - val_loss: 4.2437 - val_acc: 0.1853\n",
            "Epoch 167/250\n",
            "89/89 [==============================] - 30s 329ms/step - loss: 0.8086 - acc: 0.7459 - val_loss: 4.3019 - val_acc: 0.1767\n",
            "Epoch 168/250\n",
            "89/89 [==============================] - 30s 325ms/step - loss: 0.8074 - acc: 0.7076 - val_loss: 4.2797 - val_acc: 0.1767\n",
            "Epoch 169/250\n",
            "89/89 [==============================] - 26s 279ms/step - loss: 0.8436 - acc: 0.7062 - val_loss: 4.3012 - val_acc: 0.1853\n",
            "Epoch 170/250\n",
            "89/89 [==============================] - 29s 321ms/step - loss: 0.7434 - acc: 0.7424 - val_loss: 4.2318 - val_acc: 0.1810\n",
            "Epoch 171/250\n",
            "89/89 [==============================] - 30s 324ms/step - loss: 0.8130 - acc: 0.7197 - val_loss: 4.1964 - val_acc: 0.1897\n",
            "Epoch 172/250\n",
            "89/89 [==============================] - 26s 282ms/step - loss: 0.8058 - acc: 0.7168 - val_loss: 4.1901 - val_acc: 0.1875\n",
            "Epoch 173/250\n",
            "89/89 [==============================] - 29s 316ms/step - loss: 0.7981 - acc: 0.7303 - val_loss: 4.2886 - val_acc: 0.1746\n",
            "Epoch 174/250\n",
            "89/89 [==============================] - 30s 325ms/step - loss: 0.7870 - acc: 0.7140 - val_loss: 4.4143 - val_acc: 0.1767\n",
            "Epoch 175/250\n",
            "89/89 [==============================] - 30s 324ms/step - loss: 0.7368 - acc: 0.7530 - val_loss: 4.3510 - val_acc: 0.1853\n",
            "Epoch 176/250\n",
            "89/89 [==============================] - 30s 327ms/step - loss: 0.7029 - acc: 0.7608 - val_loss: 4.3902 - val_acc: 0.1875\n",
            "Epoch 177/250\n",
            "89/89 [==============================] - 29s 322ms/step - loss: 0.7425 - acc: 0.7424 - val_loss: 4.5875 - val_acc: 0.1724\n",
            "Epoch 178/250\n",
            "89/89 [==============================] - 29s 321ms/step - loss: 0.7223 - acc: 0.7488 - val_loss: 4.6405 - val_acc: 0.1832\n",
            "Epoch 179/250\n",
            "89/89 [==============================] - 29s 322ms/step - loss: 0.7129 - acc: 0.7516 - val_loss: 4.5387 - val_acc: 0.1810\n",
            "Epoch 180/250\n",
            "89/89 [==============================] - 29s 318ms/step - loss: 0.7133 - acc: 0.7523 - val_loss: 4.5366 - val_acc: 0.1940\n",
            "Epoch 181/250\n",
            "89/89 [==============================] - 29s 313ms/step - loss: 0.7240 - acc: 0.7445 - val_loss: 4.4470 - val_acc: 0.1832\n",
            "Epoch 182/250\n",
            "89/89 [==============================] - 29s 313ms/step - loss: 0.7667 - acc: 0.7275 - val_loss: 4.3912 - val_acc: 0.1832\n",
            "Epoch 183/250\n",
            "89/89 [==============================] - 30s 320ms/step - loss: 0.6934 - acc: 0.7480 - val_loss: 4.2570 - val_acc: 0.1832\n",
            "Epoch 184/250\n",
            "89/89 [==============================] - 29s 312ms/step - loss: 0.6771 - acc: 0.7630 - val_loss: 4.4010 - val_acc: 0.1746\n",
            "Epoch 185/250\n",
            "89/89 [==============================] - 29s 304ms/step - loss: 0.6766 - acc: 0.7615 - val_loss: 4.4219 - val_acc: 0.1746\n",
            "Epoch 186/250\n",
            "89/89 [==============================] - 27s 298ms/step - loss: 0.6694 - acc: 0.7757 - val_loss: 4.5202 - val_acc: 0.1767\n",
            "Epoch 187/250\n",
            "89/89 [==============================] - 28s 303ms/step - loss: 0.6730 - acc: 0.7644 - val_loss: 4.5517 - val_acc: 0.1810\n",
            "Epoch 188/250\n",
            "89/89 [==============================] - 29s 315ms/step - loss: 0.6262 - acc: 0.7793 - val_loss: 4.4894 - val_acc: 0.1875\n",
            "Epoch 189/250\n",
            "89/89 [==============================] - 30s 324ms/step - loss: 0.6453 - acc: 0.7892 - val_loss: 4.6048 - val_acc: 0.1897\n",
            "Epoch 190/250\n",
            "89/89 [==============================] - 29s 320ms/step - loss: 0.6452 - acc: 0.7786 - val_loss: 4.7250 - val_acc: 0.1897\n",
            "Epoch 191/250\n",
            "89/89 [==============================] - 29s 324ms/step - loss: 0.6538 - acc: 0.7679 - val_loss: 4.7256 - val_acc: 0.1832\n",
            "Epoch 192/250\n",
            "89/89 [==============================] - 25s 270ms/step - loss: 0.6555 - acc: 0.7658 - val_loss: 4.6948 - val_acc: 0.1724\n",
            "Epoch 193/250\n",
            "89/89 [==============================] - 28s 302ms/step - loss: 0.6122 - acc: 0.7842 - val_loss: 4.6012 - val_acc: 0.1789\n",
            "Epoch 194/250\n",
            "89/89 [==============================] - 28s 309ms/step - loss: 0.6240 - acc: 0.7878 - val_loss: 4.7302 - val_acc: 0.1659\n",
            "Epoch 195/250\n",
            "89/89 [==============================] - 31s 336ms/step - loss: 0.6233 - acc: 0.7857 - val_loss: 4.8088 - val_acc: 0.1767\n",
            "Epoch 196/250\n",
            "89/89 [==============================] - 28s 311ms/step - loss: 0.6474 - acc: 0.7686 - val_loss: 4.8900 - val_acc: 0.1724\n",
            "Epoch 197/250\n",
            "89/89 [==============================] - 29s 312ms/step - loss: 0.5922 - acc: 0.7864 - val_loss: 5.0102 - val_acc: 0.1767\n",
            "Epoch 198/250\n",
            "89/89 [==============================] - 29s 319ms/step - loss: 0.6319 - acc: 0.7800 - val_loss: 4.9740 - val_acc: 0.1724\n",
            "Epoch 199/250\n",
            "89/89 [==============================] - 25s 270ms/step - loss: 0.5970 - acc: 0.7977 - val_loss: 4.9337 - val_acc: 0.1918\n",
            "Epoch 200/250\n",
            "89/89 [==============================] - 28s 303ms/step - loss: 0.5769 - acc: 0.7956 - val_loss: 4.8527 - val_acc: 0.1810\n",
            "Epoch 201/250\n",
            "89/89 [==============================] - 27s 299ms/step - loss: 0.5872 - acc: 0.8119 - val_loss: 4.8254 - val_acc: 0.1767\n",
            "Epoch 202/250\n",
            "89/89 [==============================] - 28s 308ms/step - loss: 0.5624 - acc: 0.8034 - val_loss: 4.8063 - val_acc: 0.1789\n",
            "Epoch 203/250\n",
            "89/89 [==============================] - 30s 325ms/step - loss: 0.6157 - acc: 0.7722 - val_loss: 4.8570 - val_acc: 0.1832\n",
            "Epoch 204/250\n",
            "89/89 [==============================] - 29s 328ms/step - loss: 0.5274 - acc: 0.8183 - val_loss: 4.8871 - val_acc: 0.1832\n",
            "Epoch 205/250\n",
            "89/89 [==============================] - 30s 325ms/step - loss: 0.5255 - acc: 0.8233 - val_loss: 4.9482 - val_acc: 0.1789\n",
            "Epoch 206/250\n",
            "89/89 [==============================] - 30s 323ms/step - loss: 0.5421 - acc: 0.8133 - val_loss: 4.9346 - val_acc: 0.1832\n",
            "Epoch 207/250\n",
            "89/89 [==============================] - 30s 323ms/step - loss: 0.5490 - acc: 0.8062 - val_loss: 4.8136 - val_acc: 0.1789\n",
            "Epoch 208/250\n",
            "89/89 [==============================] - 30s 323ms/step - loss: 0.5359 - acc: 0.8197 - val_loss: 4.8479 - val_acc: 0.1875\n",
            "Epoch 209/250\n",
            "89/89 [==============================] - 29s 323ms/step - loss: 0.5008 - acc: 0.8318 - val_loss: 4.9651 - val_acc: 0.1810\n",
            "Epoch 210/250\n",
            "89/89 [==============================] - 29s 317ms/step - loss: 0.5268 - acc: 0.8275 - val_loss: 4.8400 - val_acc: 0.1897\n",
            "Epoch 211/250\n",
            "89/89 [==============================] - 30s 324ms/step - loss: 0.5380 - acc: 0.8070 - val_loss: 5.0199 - val_acc: 0.1832\n",
            "Epoch 212/250\n",
            "89/89 [==============================] - 30s 325ms/step - loss: 0.5548 - acc: 0.8041 - val_loss: 4.8776 - val_acc: 0.1853\n",
            "Epoch 213/250\n",
            "89/89 [==============================] - 30s 329ms/step - loss: 0.5291 - acc: 0.8183 - val_loss: 4.8335 - val_acc: 0.1832\n",
            "Epoch 214/250\n",
            "89/89 [==============================] - 30s 326ms/step - loss: 0.5011 - acc: 0.8247 - val_loss: 4.9813 - val_acc: 0.1724\n",
            "Epoch 215/250\n",
            "89/89 [==============================] - 30s 324ms/step - loss: 0.5084 - acc: 0.8290 - val_loss: 4.7807 - val_acc: 0.1853\n",
            "Epoch 216/250\n",
            "89/89 [==============================] - 29s 312ms/step - loss: 0.4772 - acc: 0.8254 - val_loss: 4.9143 - val_acc: 0.1767\n",
            "Epoch 217/250\n",
            "89/89 [==============================] - 26s 277ms/step - loss: 0.4648 - acc: 0.8382 - val_loss: 4.8975 - val_acc: 0.1767\n",
            "Epoch 218/250\n",
            "89/89 [==============================] - 28s 296ms/step - loss: 0.5110 - acc: 0.8275 - val_loss: 5.0415 - val_acc: 0.1832\n",
            "Epoch 219/250\n",
            "89/89 [==============================] - 23s 248ms/step - loss: 0.4961 - acc: 0.8275 - val_loss: 4.9987 - val_acc: 0.1810\n",
            "Epoch 220/250\n",
            "89/89 [==============================] - 28s 310ms/step - loss: 0.5123 - acc: 0.8211 - val_loss: 5.0012 - val_acc: 0.1832\n",
            "Epoch 221/250\n",
            "89/89 [==============================] - 29s 318ms/step - loss: 0.4931 - acc: 0.8311 - val_loss: 5.0856 - val_acc: 0.1703\n",
            "Epoch 222/250\n",
            "89/89 [==============================] - 30s 327ms/step - loss: 0.4787 - acc: 0.8353 - val_loss: 5.0236 - val_acc: 0.1810\n",
            "Epoch 223/250\n",
            "89/89 [==============================] - 30s 332ms/step - loss: 0.4200 - acc: 0.8588 - val_loss: 5.2531 - val_acc: 0.1746\n",
            "Epoch 224/250\n",
            "89/89 [==============================] - 30s 327ms/step - loss: 0.4502 - acc: 0.8410 - val_loss: 5.0743 - val_acc: 0.1724\n",
            "Epoch 225/250\n",
            "89/89 [==============================] - 30s 327ms/step - loss: 0.4489 - acc: 0.8297 - val_loss: 5.2243 - val_acc: 0.1789\n",
            "Epoch 226/250\n",
            "89/89 [==============================] - 30s 328ms/step - loss: 0.4290 - acc: 0.8524 - val_loss: 5.3347 - val_acc: 0.1746\n",
            "Epoch 227/250\n",
            "89/89 [==============================] - 25s 274ms/step - loss: 0.4566 - acc: 0.8467 - val_loss: 5.2561 - val_acc: 0.1746\n",
            "Epoch 228/250\n",
            "89/89 [==============================] - 30s 324ms/step - loss: 0.4821 - acc: 0.8375 - val_loss: 5.2205 - val_acc: 0.1832\n",
            "Epoch 229/250\n",
            "89/89 [==============================] - 25s 266ms/step - loss: 0.4597 - acc: 0.8460 - val_loss: 5.2592 - val_acc: 0.1875\n",
            "Epoch 230/250\n",
            "89/89 [==============================] - 25s 274ms/step - loss: 0.4388 - acc: 0.8410 - val_loss: 5.4359 - val_acc: 0.1810\n",
            "Epoch 231/250\n",
            "89/89 [==============================] - 25s 271ms/step - loss: 0.4811 - acc: 0.8368 - val_loss: 5.3744 - val_acc: 0.1746\n",
            "Epoch 232/250\n",
            "89/89 [==============================] - 28s 303ms/step - loss: 0.4644 - acc: 0.8439 - val_loss: 5.3595 - val_acc: 0.1832\n",
            "Epoch 233/250\n",
            "89/89 [==============================] - 29s 313ms/step - loss: 0.4277 - acc: 0.8623 - val_loss: 5.4241 - val_acc: 0.1746\n",
            "Epoch 234/250\n",
            "89/89 [==============================] - 29s 316ms/step - loss: 0.4264 - acc: 0.8495 - val_loss: 5.2826 - val_acc: 0.1746\n",
            "Epoch 235/250\n",
            "89/89 [==============================] - 30s 325ms/step - loss: 0.4307 - acc: 0.8517 - val_loss: 5.4543 - val_acc: 0.1853\n",
            "Epoch 236/250\n",
            "89/89 [==============================] - 30s 325ms/step - loss: 0.4176 - acc: 0.8545 - val_loss: 5.4093 - val_acc: 0.1767\n",
            "Epoch 237/250\n",
            "89/89 [==============================] - 30s 325ms/step - loss: 0.4382 - acc: 0.8510 - val_loss: 5.3637 - val_acc: 0.1832\n",
            "Epoch 238/250\n",
            "89/89 [==============================] - 30s 326ms/step - loss: 0.4094 - acc: 0.8588 - val_loss: 5.3358 - val_acc: 0.1832\n",
            "Epoch 239/250\n",
            "89/89 [==============================] - 29s 318ms/step - loss: 0.4177 - acc: 0.8616 - val_loss: 5.3989 - val_acc: 0.1875\n",
            "Epoch 240/250\n",
            "89/89 [==============================] - 29s 322ms/step - loss: 0.4158 - acc: 0.8609 - val_loss: 5.5152 - val_acc: 0.1832\n",
            "Epoch 241/250\n",
            "89/89 [==============================] - 29s 321ms/step - loss: 0.3726 - acc: 0.8616 - val_loss: 5.5452 - val_acc: 0.1810\n",
            "Epoch 242/250\n",
            "89/89 [==============================] - 30s 330ms/step - loss: 0.4031 - acc: 0.8609 - val_loss: 5.6241 - val_acc: 0.1832\n",
            "Epoch 243/250\n",
            "89/89 [==============================] - 29s 305ms/step - loss: 0.3928 - acc: 0.8595 - val_loss: 5.5719 - val_acc: 0.1767\n",
            "Epoch 244/250\n",
            "89/89 [==============================] - 28s 304ms/step - loss: 0.3964 - acc: 0.8609 - val_loss: 5.2027 - val_acc: 0.1789\n",
            "Epoch 245/250\n",
            "89/89 [==============================] - 28s 309ms/step - loss: 0.3715 - acc: 0.8680 - val_loss: 5.3817 - val_acc: 0.1724\n",
            "Epoch 246/250\n",
            "89/89 [==============================] - 28s 310ms/step - loss: 0.3920 - acc: 0.8701 - val_loss: 5.4976 - val_acc: 0.1810\n",
            "Epoch 247/250\n",
            "89/89 [==============================] - 30s 326ms/step - loss: 0.4092 - acc: 0.8545 - val_loss: 5.7076 - val_acc: 0.1832\n",
            "Epoch 248/250\n",
            "89/89 [==============================] - 29s 322ms/step - loss: 0.3672 - acc: 0.8722 - val_loss: 5.6611 - val_acc: 0.1810\n",
            "Epoch 249/250\n",
            "89/89 [==============================] - 30s 329ms/step - loss: 0.3317 - acc: 0.8857 - val_loss: 5.7197 - val_acc: 0.1703\n",
            "Epoch 250/250\n",
            "89/89 [==============================] - 30s 328ms/step - loss: 0.3631 - acc: 0.8751 - val_loss: 5.7690 - val_acc: 0.1767\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "acc = history.history['acc']\n",
        "val_acc = history.history['val_acc']\n",
        "loss = history.history['loss']\n",
        "val_loss = history.history['val_loss']\n",
        "\n",
        "epochs_x = range(len(acc))\n",
        "\n",
        "plt.plot(epochs_x, acc, 'co', label='Training acc')\n",
        "plt.plot(epochs_x, val_acc, 'k', label='Validation acc')\n",
        "plt.title('Training and validation accuracy')\n",
        "plt.legend()\n",
        "\n",
        "plt.figure()\n",
        "\n",
        "plt.plot(epochs_x, loss, 'co', label='Training loss')\n",
        "plt.plot(epochs_x, val_loss, 'k', label='Validation loss')\n",
        "plt.title('Training and validation loss')\n",
        "plt.legend()\n",
        "\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "kwylTJpTP5XI",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 545
        },
        "outputId": "4265c2bc-e2a1-41d7-8036-4f2bf02dd4ad"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Download the model"
      ],
      "metadata": {
        "id": "lD-vKaoHQAFd"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "os.makedirs('/content/drive/My Drive/cut_panoramic/Model/Classification', exist_ok=True)\n",
        "model.save('/content/drive/My Drive/cut_panoramic/Model/Classification/Male/New_44_รอบที่4_Flimpano_Male125_250_New_Unfreez.h5')"
      ],
      "metadata": {
        "id": "74dL7-HLP_Sh"
      },
      "execution_count": 18,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# from google.colab import files\n",
        "# files.download('/content/drive/My Drive/cut_panoramic/Model/33_รอบที่3_Flimpano_Male125_250.h5')"
      ],
      "metadata": {
        "id": "qcPW-brHQDpc"
      },
      "execution_count": 19,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "P4pe9URV1vBB"
      },
      "execution_count": 19,
      "outputs": []
    }
  ]
}